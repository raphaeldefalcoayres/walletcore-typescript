import { <%= props.name %>InMemoryRepository } from "#<%= props.name.toLowerCase() %>/infra/repository/db/in-memory";
import Create<%= props.name %>UseCase from "../../create-<%= props.name.toLowerCase() %>.use-case";

describe("Create<%= props.name %>UseCase Unit Tests", () => {
  let useCase: Create<%= props.name %>UseCase.UseCase;
  let repository: <%= props.name %>InMemoryRepository;

  beforeEach(() => {
    repository = new <%= props.name %>InMemoryRepository();
    useCase = new Create<%= props.name %>UseCase.UseCase(repository);
  });

  it("should create a <%= props.name.toLowerCase() %>", async () => {
    const spyInsert = jest.spyOn(repository, "insert");
    let output = await useCase.execute({});
    expect(spyInsert).toHaveBeenCalledTimes(1);
    expect(output).toStrictEqual({
      id: repository.items[0].id,
      created_at: repository.items[0].created_at,<% if(!props.options.withoutUpdate){ %>
      updated_at: repository.items[0].updated_at,<%}%>
    });

    output = await useCase.execute({});
    expect(spyInsert).toHaveBeenCalledTimes(2);
    expect(output).toStrictEqual({
      id: repository.items[1].id,
      created_at: repository.items[1].created_at,<% if(!props.options.withoutUpdate){ %>
      updated_at: repository.items[1].updated_at,<%}%>
    });
  });
});
