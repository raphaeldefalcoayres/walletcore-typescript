import { NotFoundError } from "#shared/errors";
import <%= props.name %> from "#<%= props.name.toLowerCase() %>/domain/entities/<%= props.name.toLowerCase() %>";
import Get<%= props.name %>UseCase from "../../get-<%= props.name.toLowerCase() %>.use-case";
import { <%= props.name %>InMemoryRepository } from "#<%= props.name.toLowerCase() %>/infra/repository/db/in-memory";

describe("Get<%= props.name %>UseCase Unit Tests", () => {
  let useCase: Get<%= props.name %>UseCase.UseCase;
  let repository: <%= props.name %>InMemoryRepository;

  beforeEach(() => {
    repository = new <%= props.name %>InMemoryRepository();
    useCase = new Get<%= props.name %>UseCase.UseCase(repository);
  });

  it("should throws error when entity not found", async () => {
    await expect(() => useCase.execute({ id: "fake id" })).rejects.toThrow(
      new NotFoundError(`Entity Not Found using ID fake id`)
    );
  });

  it("should returns a <%= props.name.toLowerCase() %>", async () => {
    const items = [new <%= props.name %>({})];
    repository.items = items;
    const spyFindById = jest.spyOn(repository, "findById");
    const output = await useCase.execute({ id: items[0].id });
    expect(spyFindById).toHaveBeenCalledTimes(1);
    expect(output).toStrictEqual({
      id: items[0].id,
      created_at: items[0].created_at,
      updated_at: items[0].updated_at,
    });
  });
});
