import { default as DefaultUseCase } from "#shared/usecases/use-case";
import { SearchInputDto } from "#shared/dto/search-input";
import {
  PaginationOutputDto,
  PaginationOutputMapper,
} from "#shared/dto/pagination-output";
import { <%= props.name %>Repository } from "#<%= props.name.toLowerCase() %>/domain";
import { <%= props.name %>Output, <%= props.name %>OutputMapper } from "../dto";

export namespace ListCategoriesUseCase {
  export class UseCase implements DefaultUseCase<Input, Output> {
    constructor(private <%= props.name.toLowerCase() %>Repo: <%= props.name %>Repository.Repository) {}
    //
    async execute(input: Input): Promise<Output> {
      const params = new <%= props.name %>Repository.SearchParams(input);
      const searchResult = await this.<%= props.name.toLowerCase() %>Repo.search(params);
      return this.toOutput(searchResult);
    }

    private toOutput(searchResult: <%= props.name %>Repository.SearchResult): Output {
      const items = searchResult.items.map((i) => {
        return <%= props.name %>OutputMapper.toOutput(i);
      });
      return PaginationOutputMapper.toOutput(items, searchResult);
    }
  }

  export type Input = SearchInputDto;

  export type Output = PaginationOutputDto<<%= props.name %>Output>;
}

export default ListCategoriesUseCase;

//request e response http
//dados - <%= props.name %> - dados de saida

//UseCase -> domain

//infra -> domain
